c
mail.subject
c
expect(assigns(:user).status).to eq("approval")
expect(response.body).to include("token")
response.body
user.password
user.email
expect(response.body).to include('token')
response.body
response
User.count
c
expect(response).to have_http_status(201)
User.count
c
n
User.count
c
expect(response)
response
n
valid_credentials
c
valid_attributes
expect(response.body).to include("Wait for Admin Approve Request")
expect(response)
:created
User.count
valid_credentials
response
c
role[:name]
let(:role) {{:name => "user"}}
:role
c
role[:name]
{:name => "user"}
role
role[:name]
role
name:
:role
role
c
assigns(:user).email
assigns(:user).name
c
p assigns(:user).name
assigns(:user).name
expect(response).to eq('Vishwas')
name
user.name
:user
c
expect(assigns(:user).name).to eq('Vishwas')
n
:create
valid_attributes 
c
response.body
c
 post :create, params: { user: invalid_attributes }
response
invalid_attributes 
c
expect(response.body)
expect(response).to be_successful
expect(response).to have_http_status(:created)
:created
response
c
n
valid_attributes
c
response
valid_attributes
 user: valid_attributes
params
User.count 
n
post :create, params: { user: valid_attributes }
   17:         }.to change { User.count }.by(0)
valid_attributes
c
n
c
params
user: valid_attributes
c
expect(assigns(:users)).not_to eq(User.all)
c
expect(assigns(:users)).to eq(User.all)
User.all
:users
c
response
n
c
expect(subject).to_not be_valid
subject
subject.email
n
c
user.update(name: 'New Name')
n
expect(UserMailer).not_to receive(:approve)
UserMailer
user
n
c
user.update(status: :approval)
expect(UserMailer).to receive(:approve).and_call_original
user = create(:user, valid_attributes.merge(status: :pending))
valid_attributes.merge(status: :pending)
valid_attributes
c!
receive(:welcome).and_call_original
end
create(:user, valid_attributes)
 expect(UserMailer).to receive(:welcome).and_call_original
:welcome
UserMailer
c!
User.statuses
c!
n
expect(User.statuses).to eq({"approval"=>"Approval", "pending"=>"Pending"})
it 'status of enum' do 
describe 'enums' do
n
end
it { should belong_to(:role) }
 it { should validate_presence_of(:name) }
should validate_presence_of(:name)
describe 'validations' do 
n
c!
n
let(:valid_attributes) { { name: 'Vishwas', email: 'vishwas@example.com', password: 'password', role: role } }
n
:valid_attributes
let(:role) {create(:role) }
n
:role
create(:role)
:role
c
n
@user.status == "approve"
n
@user.status == "approve"
@user && @user.authenticate(params[:password])
n
 @user = User.find_by(email: params[:email])
c
n
@user.status == "approve"
n
c
n
@user = User.find_by(email: params[:email])
n
params[:email]
n
c!
 f.input :status
c!
f.input :name
f.input :role_id
:role_id
n
User.new(user_params)
c!
@user.save
n
@user
User.new(user_params)
n
user_params
c
@user&& @user.password_digest == params[:password]
@user = User.find_by(email: params[:email])
@user.password_digest == params[:password]
c
@user.password_digest == params[:password]
@user.password_digest
@user
@user&& @user.authenticate(params[:password_digest])
@user&& @user.authenticate(params[:password])
@user&& @user.find_by(user_params[:password])
@user&& @user.authenticate(params[:password])
@user&& @user.authenticate(user_params[:password])
@user = User.find_by(email: params[:email])
c
@user = User.find_by(email: user_params[:emcail])
@user = User.find_by(email: user_params[:email])
@user = User.find_by(email: user_params[:user][:email])
@user = User.find_by(email: user_params[:email])
c
@user&.authenticate(params[:password])
 @user = User.find_by(email: params[:email])
c!
@user&.authenticate(params[:password])
 @user = User.find_by(email: params[:email])
c
@user&.authenticate(params[:password])
user&.authenticate(params[:password])
  if user&.authenticate(params[:password])
@user&.authenticate(params[:password])
@user&@user.find_by(password: params[:password])
@user&&@user.find_by(password: params[:password])
@user&&@user.find_by(params[:password])
@user&&@user.find(params[:password])
@user&@user.find(params[:password])
@user&@user.find_by(params[:password])
@user&.authenticate(params[:password])
Cparams[:password]
params[:password]
params
password
@user&&authenticate(params[:password])
@user&&.authenticate(params[:password])
@user
@user&.authenticate(params[:password])
@user = User.find_by(email: params[:email])
c!
user&.authenticate(params[:password_digest])
n
:password_digest
 user = User.find_by(email: params[:email])
 User.find_by(email: params[:email])
params[:email]
c!
 User.find_by(email: params[:email])
n
user
User.find_by(email: params[:email])
c!
User.find_by(email: params[:email])
user
user = User.find_by(email: params[:email])
n
user = User.find_by(email: params[:email])
User.find_by(email: params[:email])
:email
email: params[:email]
